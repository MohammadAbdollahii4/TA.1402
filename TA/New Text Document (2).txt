BST question-2:

#include <iostream>
#include <list>
#include <queue>
#include <vector>

class Graph {
private:
    int numVertices;
    std::vector<std::list<int>> adjLists;

public:
    // Constructor
    Graph(int vertices) : numVertices(vertices), adjLists(vertices) {}

    // Method to add an edge between two vertices
    void addEdge(int v, int w) {
        adjLists[v].push_back(w);
        adjLists[w].push_back(v);  // Assuming an undirected graph
    }

    // BFS traversal starting from a given vertex
    void BFS(int startVertex) {
        // Mark all vertices as not visited
        std::vector<bool> visited(numVertices, false);

        // Create a queue for BFS
        std::queue<int> bfsQueue;

        // Mark the current vertex as visited and enqueue it
        visited[startVertex] = true;
        bfsQueue.push(startVertex);

        // Iterate until the queue is empty
        while (!bfsQueue.empty()) {
            // Dequeue a vertex from the queue and print it
            int currentVertex = bfsQueue.front();
            std::cout << currentVertex << " ";
            bfsQueue.pop();

            // Enqueue all adjacent vertices of the dequeued vertex that are not yet visited
            for (int adjacentVertex : adjLists[currentVertex]) {
                if (!visited[adjacentVertex]) {
                    visited[adjacentVertex] = true;
                    bfsQueue.push(adjacentVertex);
                }
            }
        }
    }
};

// Driver code
int main() {
    // Create a graph with 5 vertices
    Graph g(5);

    // Add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 4);

    // Perform BFS traversal starting from vertex 0
    std::cout << "BFS traversal starting from vertex 0: ";
    g.BFS(0);
    std::cout << std::endl;

    return 0;
}