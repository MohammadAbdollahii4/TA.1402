DFS Q


#include <iostream>
#include <list>
#include <vector>

class Graph {
private:
    int numVertices;
    std::vector<std::list<int>> adjLists;
    std::vector<bool> visited;

public:
    // Constructor
    Graph(int vertices) : numVertices(vertices), adjLists(vertices), visited(vertices, false) {}

    // Method to add an edge between two vertices
    void addEdge(int v, int w) {
        adjLists[v].push_back(w);
        adjLists[w].push_back(v);  // Assuming an undirected graph
    }

    // DFS traversal starting from a given vertex
    void DFS(int startVertex) {
        // Mark all vertices as not visited
        for (int i = 0; i < numVertices; ++i) {
            visited[i] = false;
        }

        // Call the recursive helper function to perform DFS
        DFSUtil(startVertex);
    }

private:
    // Recursive helper function for DFS traversal
    void DFSUtil(int vertex) {
        // Mark the current vertex as visited
        visited[vertex] = true;
        std::cout << vertex << " ";

        // Recur for all adjacent vertices not yet visited
        for (int adjacentVertex : adjLists[vertex]) {
            if (!visited[adjacentVertex]) {
                DFSUtil(adjacentVertex);
            }
        }
    }
};

// Driver code
int main() {
    // Create a graph with 5 vertices
    Graph g(5);

    // Add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 4);

    // Perform DFS traversal starting from vertex 0
    std::cout << "DFS traversal starting from vertex 0: ";
    g.DFS(0);
    std::cout << std::endl;

    return 0;
}